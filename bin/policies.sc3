// These are the standard CASA policies...

/**
 * --- GENERAL ---
 * A general policy to fulfill SC to send a message when that message is sent. 
 */
(policy 
  (MsgEvent * (*)) // the 1st parameter is an EVENT; (MsgEvent * *) describes the event.
	(quote ( 
	  (Fulfil
		  :Debtor msg.sender
		  :Creditor msg.receiver
		  :Performative msg.performative
		  :Act msg.act
		)
  ))
)

/**
 * --- INFORM ---
 * This policy deals with any INFORM-type message, which is nearly all non-reply messages.
 * It adds a private social commitment for the recipient to to consider the the information.
 * This is implemented by calling a method in the agent in the form:
 *    public PerformDescriptor <name>_<act>(MLMessage)
 * where <name> is a consider-name associated with policy for the most-specific performative in the 
 * message that has a consider-name.
 *
 * In addition this policy conditionally instantiates on ACK SC if the agent so specifies.
 */
(policy
  (MsgEvent inform *)
	(quote (
/*	  (Add
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative //see consider-map.txt
   		:Act msg.act
		  :Action "casa.policy.sc3.actions.DefaultConsiderObject"
		  //:Shared false
		)*/
		// v this replaces that ^
		(RuleClass "casa.policy.sc3.InformRule") /***************should blow up if it's not quoted, but this is a temporary hack***************/
		
	  //(Addif (quote (or (isAgent "getUseAckProtocol") (equal msg.request-ack true)))
	  (Addif (quote (isAgent "getUseAckProtocol"))
		  :DependsOn
		    (SCdescriptor
		  	  :Performative consider
		  	  :Act msg.act
		    )
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative ack
		  :Act (cons msg.performative msg.act)
		  :Action "casa.policy.sc3.actions.AckAction"
		  :Shared
		)
  ))
)

/** 
 * --- PETITION (REQUEST and PROPOSE) ---
 * This policy deals with both REQUEST and PROPOSE messages and merely instantiates
 * a SC to REPLY.
 */
(policy
  (MsgEvent petition *)
	(quote (
	  (Add
		  :DependsOn
		    (SCdescriptor
		  	  :Performative consider
		  	  :Act msg.act
		    )
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative reply
		  :Act (cons msg.performative msg.act)
		  :Action "casa.policy.sc3.actions.ReplyAction"
		  :Shared
		)
  ))
)

/* NOT SURE WHY THIS IS HERE -- Rob 2009/02/22 **************************************
//(policy
//  (MsgEvent agree (request discharge *))
//	(quote (
//	  (Fulfil
//		  :Debtor msg.sender
//		  :Creditor msg.receiver
//		  :Performative (car msg.act) // top element - request
//		  :Act (cdr msg.act) // popped once to remove request
//		)
//	  (Fulfil
//		  :Debtor msg.sender
//		  :Creditor msg.receiver
//		  :Performative perform
//		  :Act (cdr (cdr (cdr msg.act))) // popped thrice to remove request, discharge, and perform
//		)
//	  (Fulfil
//		  :Debtor msg.sender
//		  :Creditor msg.receiver
//		  :Performative reply
//		  :Act (cons petition (cdr (cdr (cdr msg.act)))) // popped thrice and then with petition added
//		 	 	  // to remove request, discharge, and perform and then end up with petition|original-act
//		)
//  ))
//  :desc ""
//)
**********************************************************************************/

/**
 * --- AGREE/REQUEST ---
 * This policy deals with an AGREE to a REQUEST and instantiates and PERFORM SC for the
 * SENDER to do the task and a second PRPOSE/DISCHARGE SC for the SENDER. 
 */
(policy
  (MsgEvent agree (request *))
  (quote (
	  (Add
		  :Debtor msg.sender
		  :Creditor msg.receiver
		  :Performative perform
		  :Act (cdr msg.act)  // popped once to remove request
		  :Action "casa.policy.sc3.actions.PerformAction"
		  :Shared
		)
	  (Add
		  :DependsOn
		    (SCdescriptor
		  	  :Performative perform
		  	  :Act (cdr msg.act)
		  	)
		  :Debtor msg.sender
		  :Creditor msg.receiver
		  :Performative propose
		  :Act (cons discharge (cons perform (cdr msg.act))) //popped once and with discharge|perform added
		 		  // to remove request and end up with discharge|perform|original-act)
		  :Action "casa.policy.sc3.actions.ProposeDischargeAction"
		  :Shared
		)
  ))
)

/**
 * --- AGREE/PROPOSE ---
 * This policy deals with an AGREE to a PROPOSE and instantiates and PERFORM SC for the
 * RECEIVER to do the task and a second PRPOSE/DISCHARGE SC for the RECIEVER. 
 */
(policy
  (MsgEvent agree (propose *))
  (quote (
	  (Add
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative perform
		  :Act (cdr msg.act)  // popped once to remove request
		  :Action "casa.policy.sc3.actions.PerformAction"
		  :Shared
		)
	  (Add
		  :DependsOn
		    (SCdescriptor
		  	  :Performative perform
		  	  :Act (cdr msg.act)
		  	)
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative propose
		  :Act (cons discharge (cons perform (cdr msg.act))) //popped once and with discharge|perform added
		 		  // to remove request and end up with discharge|perform|original-act)
		  :Action "casa.policy.sc3.actions.ProposeDischargeAction"
		  :Shared
		)
  ))
)

/**
 * --- AGREE/PROPOSE|DISCHARGE ---
 * This policy deals with an AGREE to a PROPOSE DISCHARGE and fulfills three commitments:
 * 1. DEBTOR is relieved of its SC to DISCHARGE the performance of the action
 * 2. DEBTOR is relieved of its SC to perform the action
 * 3. DEBTOR is relieved of its SC to REPLY to the 
 */
(policy 
  (MsgEvent agree (propose discharge *))
  (quote (
	  (Fulfil
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative (car msg.act) // top element - request
		  :Act (cdr msg.act) // popped once to remove request
		 )
	  (Fulfil
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative perform
		  :Act (cdr (cdr (cdr msg.act))) // popped thrice to remove request, discharge, and perform
		)
//	  (Fulfil
//		  :Debtor msg.receiver
//		  :Creditor msg.sender
//		  :Performative reply
//		  :Act (cons petition (cdr (cdr (cdr msg.act)))) // popped thrice and then with petition added
//		 	 	  // to remove request, discharge, and perform and then end up with petition|original-act
//		)
  ))
)

(policy 
  (MsgEvent cancel *)
  (quote (
	  (Cancel
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative notify
		  :Act (cdr msg.act) // popped once to remove subscribe
		)
	  (Cancel
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative monitor
		  :Act (cdr msg.act) //popped once to remove subscribe
		)
	))
)

(policy
  (MsgEvent agree (subscribe *))
	(quote (
	  (Add
		  :Debtor msg.sender
		  :Creditor msg.receiver
		  :Performative monitor
		  :Act (cdr msg.act) // popped once to remove subscribe
		  :Action "casa.policy.sc3.actions.MonitorAction"
		  :GetEvents // call getAgentEvents(MLMessage) and give the agent a chance to add some events... 
		  :Shared
		)
	  (Add
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative cancel
		  :Act msg.act // without popping subscribe
		  :Shared
		)
	  (Add
		  :DependsOn
		    (SCdescriptor
		  	  :Performative monitor
		  	  :Act (cdr msg.act)
		    )
		  :Debtor msg.sender
		  :Creditor msg.receiver
		  :Performative notify
		  :Act (cdr msg.act) // popped once to remove subscribe
		  :Action "casa.policy.sc3.actions.NotifyAction"
		  :Shared
		)
	))
)

(policy 
  (MsgEvent proxy *)
	(quote (
	  (Add
		  :DependsOn
		    (SCdescriptor
		  	  :Performative consider
		  	  :Act msg.act
		    )
		  :Debtor msg.receiver
		  :Creditor msg.sender
		  :Performative proxy
		  :Act (cons msg.performative msg.act)
		  :Action "casa.policy.sc3.actions.ProxyAction"
		  //:Shared false
		)
	))
)